#include <stdio.h>
#include <stdlib.h>
struct Edge {
    int src, dest, weight;
};
struct Subset {
    int parent, rank;
};
#define V 5 
int compareEdges(const void* a, const void* b);
int find(struct Subset subsets[], int i);
void Union(struct Subset subsets[], int x, int y);
void kruskalMST(struct Edge graph[]);
int main() {
    struct Edge graph[] = {
        {0, 1, 2},
        {0, 3, 6},
        {1, 2, 3},
        {1, 3, 8},
        {1, 4, 5},
        {2, 4, 7},
        {3, 4, 9}
    };
    
    kruskalMST(graph);
    return 0;
    
}
int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);

    return subsets[i].parent;
}
void Union(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}
void kruskalMST(struct Edge graph[]) {

    qsort(graph, V-1, sizeof(struct Edge), compareEdges);  
    struct Subset subsets[V];
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    struct Edge result[V];
    int e = 0;
    while (e < V - 1) {
       
        struct Edge nextEdge = graph[e++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

      
        if (x != y) {
            result[e - 1] = nextEdge;
            Union(subsets, x, y);
        }
    }
    
    printf("Edge \tWeight\n");
    for (int i = 0; i < V - 1; i++)
        printf("%d - %d \t%d\n", result[i].src, result[i].dest, result[i].weight);
}
